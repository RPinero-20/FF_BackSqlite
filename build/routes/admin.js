"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const connect_1 = require("../db/connect");
const admin_1 = require("../controller/admin");
const admin_2 = require("../controller/admin");
const admin_3 = require("../controller/admin");
const admindownloadInvoice_1 = require("../controller/admindownloadInvoice");
const middlewares_1 = require("../middlewares");
const adminRouter = (0, express_1.Router)();
const homeUrl = '/home';
const products = '/products';
const toCreate = '/product/newProduct';
const toSave = '/product';
const toEdit = '/product';
const toDetail = '/product';
const toDelete = '/product';
const categories = '/categories';
const createCategory = '/category';
const editedCategory = '/category';
const delCategory = '/category';
const sections = '/sections';
const users = '/users';
const toEditUser = '/user';
const editedUser = '/user';
const createUser = '/user';
const deleteUser = '/user';
const clients = '/clients';
const toEditClient = '/client';
const editedClient = '/client';
const createClient = '/client';
const delClient = '/client';
const orders = '/orders';
const toEditOrder = '/order';
const editedOrder = '/order';
const createOrder = '/order';
const delOrder = '/order';
const downloadInvoice = "/downloadInvoice";
const loginUser = '/login';
adminRouter.use((_req, _res, next) => {
    (0, connect_1.conectToDB)();
    next();
});
adminRouter.get(products, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getProducts);
adminRouter.get(toDetail, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getProductToEditDetail);
adminRouter.get(toCreate, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getToCreateProduct);
adminRouter.put(toEdit, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.putProductEdited);
adminRouter.post(toSave, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.postProduct);
adminRouter.delete(toDelete, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.deleteProduct);
adminRouter.get(users, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_3.getUsuarios);
adminRouter.get(toEditUser, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_3.getUserToEdit);
adminRouter.put(editedUser, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.putUsuario);
adminRouter.post(createUser, admin_3.postUsuario);
adminRouter.delete(deleteUser, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.deleteUsuario);
adminRouter.get(sections, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getAdminSections);
adminRouter.get(categories, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_2.getAdminCategories);
adminRouter.post(createCategory, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_2.postCategory);
adminRouter.put(editedCategory, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.putCategory);
adminRouter.delete(delCategory, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.deleteCategory);
adminRouter.get(clients, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_3.getClients);
adminRouter.get(toEditClient, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getClientToEdit);
adminRouter.put(editedClient, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.putClient);
adminRouter.post(createClient, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.postClient);
adminRouter.delete(delClient, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.deleteClient);
adminRouter.get(orders, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getOrdersDetails);
adminRouter.get(toEditOrder, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.getOrderDetailToEdit);
adminRouter.put(editedOrder, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.putOrderEdited);
adminRouter.post(createOrder, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.postOrderDetail);
adminRouter.delete(delOrder, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admin_1.deleteOrder);
adminRouter.get(downloadInvoice, [middlewares_1.authJwt.verifyToken, middlewares_1.authJwt.IsModerator], admindownloadInvoice_1.getInvoice);
adminRouter.post(loginUser, admin_3.postLogin);
exports.default = adminRouter;
//# sourceMappingURL=admin.js.map