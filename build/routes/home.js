"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const home_1 = require("../controller/home");
const productDetail_1 = require("../controller/productDetail");
const categories_1 = require("../controller/categories");
const productsList_1 = require("../controller/productsList");
const payresume_1 = require("../controller/payresume");
const buyListConfirm_1 = require("../controller/buyListConfirm");
const userListOrders_1 = require("../controller/userListOrders");
const clientAcces_1 = require("../controller/clientAcces");
const connect_1 = require("../db/connect");
const payConfirm_1 = require("../controller/payConfirm");
const downloadInvoice_1 = require("../controller/downloadInvoice");
const middlewares_1 = require("../middlewares");
const clientRouter = (0, express_1.Router)();
const homeUrl = "/home";
const categories = "/categories";
const productsList = "/productsList";
const productDetail = "/productDetail";
const payresume = "/payresume";
const getAddress = "/addressConfirmation";
const lastConfirmation = "/lastConfirmationOrder";
const paymentDetail = "/paymentDetail";
const paymentConfirmation = "/paymentConfirmation";
const signUp = "/signUp";
const signIn = "/signIn";
const userAuthInfo = "/userAuthInfo";
const userOrders = "/userOrders";
const downloadInvoice = "/downloadInvoice";
clientRouter.use((_req, _res, next) => {
    (0, connect_1.conectToDB)();
    next();
});
clientRouter.get(homeUrl, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], home_1.getProducts);
clientRouter.get(userAuthInfo, clientAcces_1.userAuthGuest);
clientRouter.post(signUp, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], clientAcces_1.clientSignUp);
clientRouter.post(signIn, clientAcces_1.clientSignIn);
clientRouter.get(categories, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], categories_1.getCategories);
clientRouter.get(productsList, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], productsList_1.getFnToFind);
clientRouter.get(productDetail, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], productDetail_1.getProductDetail);
clientRouter.post(payresume, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], payresume_1.getPayResume);
clientRouter.put(payresume, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsGuest], payresume_1.getPayResume);
clientRouter.put(getAddress, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], payresume_1.putShippingAddress);
clientRouter.get(getAddress, [middlewares_1.authJwtStore.IsClient, middlewares_1.authJwtStore.IsClient], payresume_1.getshippingAddress);
clientRouter.get(lastConfirmation, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], payresume_1.getFinishedOrder);
clientRouter.put(lastConfirmation, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], buyListConfirm_1.putOrderConfirmed);
clientRouter.get(paymentDetail, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], buyListConfirm_1.getPaymentDetail);
clientRouter.get(userOrders, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], userListOrders_1.getUserListOrders);
clientRouter.get(paymentConfirmation, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], payConfirm_1.getBanksListInformation);
clientRouter.get(downloadInvoice, [middlewares_1.authJwtStore.verifyToken, middlewares_1.authJwtStore.IsClient], downloadInvoice_1.getInvoice);
exports.default = clientRouter;
//# sourceMappingURL=home.js.map